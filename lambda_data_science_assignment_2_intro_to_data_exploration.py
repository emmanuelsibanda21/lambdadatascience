# -*- coding: utf-8 -*-
"""Lambda data science Assignment 2 - Intro to Data Exploration

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gCi6NoBNV_EGMfqD8CecKlis8hLmQ4ja

## 1) Copy the notebook to your google account.

## 2) Import the pandas library and alias it as "pd".
"""

import pandas as pd

"""## 3) Read in the CSV dataset that is found at the following URL:
[DATASET HERE](https://raw.githubusercontent.com/ryanleeallred/datasets/master/messy-data.csv)
"""

pf = pd.read_csv('https://raw.githubusercontent.com/ryanleeallred/datasets/master/messy-data.csv')

"""## 4) Print out the shape as well as the first 5 rows of the dataframe."""

print(pf.shape)
pf.head()

"""## 5) Print out the datatypes of the dataframe columns (dataset features)."""

pf.dtypes

"""## 6) Print out the summary statistics of the numeric values of your dataset i.e. min, max, mean, standard deviation, etc."""

pf.describe()

"""## 6) Clean all NaN values from the dataset.

Feel free to add code cells as needed.
"""

median_epsilon = pf.epsilon.median()
pf['zeta'] = pf ['zeta'].fillna(method='ffill')
pf.epsilon = pf.epsilon.fillna(median_epsilon)

"""## 6.1) Describe how you addressed the NaN values and give an explanation justifying your decision."""

# ran isnull on each column to find the columns with null values summed the values, if 0 then no NaNs,if more than zero column had NaNs
# since zeta contained yes and no values, the only foreseeable way to input missing data was through forward filling
# for epsilon I decided to fill in missing data using the median, I saw quite a big variation between the first row and 5th row and and even greater discrepency between the first 5 values and the mean, therefore assumed forward or back filling wouldn't give me sufficient accuracy. Decided to use the median because the mean may, in some cases, be distorted by outliers

"""## 7) Create scatter plots using Matplotlib. Can you find any interesting relationships in the data? Be sure to label your axis and to give your graphs a title.

Screenshot cool graphs that you create and share them with the slack channel. 

Don't forget to import matplotlib before trying to use it.
"""

import matplotlib.pyplot as plt
plt.xlabel('Alpha')
plt.ylabel('Delta')
plt.title('You did it')
plt.scatter(pf['alpha'], pf['delta'])
plt.show

"""## 8) STRETCH GOAL (Extra Credit)

Machine Learning algorithms don't do well with categorical values that are represented by strings. In order to have this dataset completely cleaned we need to transform the categorical variables that are represented as strings into numeric categorical variables

- **Turn all categorical features (columns) into numeric features**

Hints:

[Scikit-Learn One-Hot-Encoder](http://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.OneHotEncoder.html)

[Pandas Docs - Working with Categorical Data](https://pandas.pydata.org/pandas-docs/stable/categorical.html)

[Guide to Encoding Categorical Variables in Python](http://pbpython.com/categorical-encoding.html)
"""